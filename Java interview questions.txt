1) Java 8 features
*Functional Interface
*Stream API
*Default & static Methods
*Lambda Expressions
*Date and time API -- Immutability,Thread-safety,Time zone support:
*Optional Class

2) Functional interface
*Functional interface has one abstract method it uses @FunctionalInterface annotation.
*used to achive lambda expression

3) Atomic integer in java
To make it threat safe we use atomic integer

4) Consider a list with null,positive,negative integers.Write code to sum all the positive integers
List<Integer> li = Arrays.asList(null,-1,2);
Integer total = li.stream().filter(x-> x!=null).collect(Collectors.summingInt(Integer::intValue));


5) Count and display the number of positive, negative and null values in the list

6) Get current date in java 8
LocalDate date = LocalDate.now();

7.explain multithreading with example
public class Main {
    public static void main(String[] args) {
        MyThread myThread = new MyThread();
        myThread.start();
        
        // main thread continues executing while myThread runs concurrently
        for (int i = 0; i < 10; i++) {
            System.out.println("Main thread: " + i);
        }
    }
}

class MyThread extends Thread {
    public void run() {
        // thread code to be executed concurrently
        for (int i = 0; i < 10; i++) {
            System.out.println("MyThread: " + i);
        }
    }
}
8.java program to remove duplicates from an array
	   List<Integer> withoutDups = 	li.stream().distinct().collect(Collectors.toList());
	   
9.optional classes
*optional classes used to handle nullpointerexceptions
*Reduce boiler plate codes
*of & ofNullable


10.stream methods
*Map,filter,findany,findFirst,count,distinct

11.default methods in which scenario
*For backward compatability

12.implement singleton class and in what case you have came across?

13. Write a program to sum the salary of employees whose age >30,we have List of employees name ,age and salary
	Long output = employeeList.stream().filter(x-> x.getAge()>30).map(x-> x.getSalary()).reduce((a,b)-> a+b).get();
	
14. why we go for try with resource
* Autoclosable interface
* This interface has a single method, "close()", which is called when the resource is no longer needed and should be closed.

15. use of finally
*Default block 

16.what is anonymous class?
an anonymous class is a local class that is declared and instantiated at the same time, without using a separate class declaration.

17. terminal operator in java
count(), forEach(), collect(), reduce()

18. Intermediate operator in java
filter(), map(),  distinct(), sorted()

19.Comparable & Comparator interface
When a class implements the Comparable interface, it must implement the compareTo() method, which returns an integer value that indicates whether the object is greater than, equal to, or less than the specified object.

The Comparator interface is used to define a custom ordering of objects

20. serialization, deserialization
Serialization is the process of converting an object into a stream of bytes so that it can be easily stored or transmitted over a network

21. serialVersionUID what is its use?

22. Transient variable?
In Java, the transient keyword is used to indicate that a field should not be serialized during object serialization.

23. Deadlock in java
A deadlock in Java is a situation where two or more threads are blocked and waiting for each other to release a resource or a lock that they need in order to proceed.

24. what is diamond operator?
In Java, the diamond operator <> is used to denote the use of a generic type parameter without explicitly specifying its type.

25. ConcurrentHashMap?
which allows concurrent access to multiple threads, hence concurrent modification error wont popup while looping.

26. String Immutable, why?
Security,Performance because it caches the value,Thread-safety,Consistency, 

27. types of string declaration and how it stores internally


